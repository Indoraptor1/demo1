package mavenapplication;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.ws.rs.client.Entity;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

public class HOME_JFrame extends javax.swing.JFrame {

    public HOME_JFrame() {
        initComponents();
        jLabel1.setText("Welcome <" + Login.username + ">!");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("jLabel1");

        jButton1.setText("Felhasználó regisztrálása");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "First name", "Last name", "B.Date", "Address", "e-mail"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                load(evt);
            }
        });
        jTable1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                show(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jToggleButton1.setText("Átvitel");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        RegisterForm rgf = new RegisterForm();
        rgf.setVisible(true);
        rgf.pack();
        rgf.setLocationRelativeTo(null);
        rgf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void load(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_load
        filltable();

    }//GEN-LAST:event_load

    private void show(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_show
        filltable();
    }//GEN-LAST:event_show

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        registerAllPerson();

    }//GEN-LAST:event_jToggleButton1ActionPerformed

    public static void main(String args[]) {

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HOME_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HOME_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HOME_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HOME_JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HOME_JFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    public javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    private void registerAllPerson() {

        // lekérjük az összes embert akinek ninbcs a szerveren user_id
        String query = "SELECT u_uname FROM demo_user WHERE user_id is NULL";

        try {
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(query);

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                String email = rs.getString("u_uname");
                registerOnePerson(email);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void registerOnePerson(String email) {

        String query = "SELECT u_fname, u_lname, u_bdate, u_address, u_uname FROM demo_user WHERE u_uname = ?";

        String fname;
        String lname;
        try {
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(query);

            ps.setString(1, email);

            ResultSet rs = ps.executeQuery();

            if (!rs.next()) {
                //Logger.getLogger(Login.class.getName()).log(Level.SEVERE, "Ismeretlen felhasználó " + email)
                JOptionPane.showMessageDialog(null, "Ismeretlen felhasználó " + email, "Felhasználó", JOptionPane.WARNING_MESSAGE);
                return;
            }

            fname = rs.getString("u_fname");
            lname = rs.getString("u_lname");
            //rs.getString("u_bdate");
            //rs.getString("u_address");
            email = rs.getString("u_uname");
        } catch (SQLException ex) {
            //Logger.getLogger(Login.class.getName()).log(Level.SEVERE, "SQL hiba " + email, ex);
            JOptionPane.showMessageDialog(null, "SQL hiba " + email, "e-mail", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Entity<String> body = Entity.json("{\n"
                + "\"email\": \"" + email + "\",\n"
                + "\"internationalMobileCallerId\": \"36\",\n"
                + "\"subscriberMobileNumber\": \"201234567\",\n"
                + "\"mobile\": \"36301111111\",\n"
                + "\"displayName\": \"" + fname + " " + lname + "\",\n"
                + "\"surName\": \"" + fname + "\",\n"
                + "\"givenName\": \"" + lname + "\",\n"
                + "\"domainId\": 18,\n"
                + "\"status\": \"ACTIVE\",\n"
                + "\"language\": \"HU\",\n"
                + "\"secondFactorEnabled\" : true,\n"
                + "\"roleIds\": [\n"
                + "121\n"
                + "]\n"
                + "}");

        Logger.getLogger(Login.class.getName()).log(Level.INFO, "connect");

        // megkapjuk a szerver user_id -t
        Response response = MyConnection.getClient()
                .target(Login.serverip)
                .path("rest")
                .path("user")
                .request(MediaType.APPLICATION_JSON)
                //.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                .buildPost(body)
                .invoke();

        Logger.getLogger(Login.class.getName()).log(Level.INFO, response.toString());

        // szerver user_oid-t beírjuk a helyi adatbázisba
        if (response.getStatus() == 201) {
            String userId = response
                    .readEntity(String.class);
            updateUser(email, userId);

        } else {
            //Logger.getLogger(Login.class.getName()).log(Level.SEVERE, "HIBÁS EMAIL CÍM:" + email);
            JOptionPane.showMessageDialog(null, "HIBÁS EMAIL CÍM:" + email, "Hibás e-mail", JOptionPane.WARNING_MESSAGE);
        }

    }

    private void updateUser(String email, String userId) {
        String query = "UPDATE demo_user SET user_id = ? WHERE  u_uname = ?";

        try {
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(query);

            ps.setString(1, userId);
            ps.setString(2, email);

            ps.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "Az átvitel sikeres", "Siker", JOptionPane.INFORMATION_MESSAGE);
    }

    private void filltable() {
        DefaultTableModel another;
        if (jTable1.getModel() instanceof DefaultTableModel) {
            another = (DefaultTableModel) jTable1.getModel();
        } else {
            another = new DefaultTableModel();
        }

        int rows = another.getRowCount();
        for (int i = 1; i <= rows; i++) {
            another.removeRow(0);
        }

        String query = "SELECT u_fname, u_lname, u_bdate, u_address, u_uname FROM demo_user";

        try {
            PreparedStatement ps = MyConnection.getConnection().prepareStatement(query);

            ResultSet rs = ps.executeQuery();

            while (rs.next()) {
                Vector vector = new Vector();
                vector.add(rs.getString("u_fname"));
                vector.add(rs.getString("u_lname"));
                vector.add(rs.getString("u_bdate"));
                vector.add(rs.getString("u_address"));
                vector.add(rs.getString("u_uname"));
                another.addRow(vector);
//Logger.getLogger(Login.class.getName()).log(Level.INFO, "adat érkezett");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }

//        TableColumnModel colmodel = new DefaultTableColumnModel();
//        colmodel.addColumn(new TableColumn(0, 75));
//        colmodel.addColumn(new TableColumn(1, 75));
//        colmodel.addColumn(new TableColumn(2, 75));
//        colmodel.addColumn(new TableColumn(3, 75));
//        colmodel.addColumn(new TableColumn(4, 75));
//        jTable1.setColumnModel(colmodel);
        jTable1.setModel(another);
    }
}
